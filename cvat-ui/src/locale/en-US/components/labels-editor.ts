export default {
    // common.ts
    'Type of attribute name must be a string. Got value ${attr.name}': 'Type of attribute name must be a string. Got value ${attr.name}',
    'Attribute: "${attr.name}". Type of attribute id must be a number or undefined. Got value ${attr.id}': 'Attribute: "${attr.name}". Type of attribute id must be a number or undefined. Got value ${attr.id}',
    'Attribute: "${attr.name}". Unknown input type: ${attr.input_type}': 'Attribute: "${attr.name}". Unknown input type: ${attr.input_type}',
    'Attribute: "${attr.name}". Mutable flag must be a boolean value. Got value ${attr.mutable}': 'Attribute: "${attr.name}". Mutable flag must be a boolean value. Got value ${attr.mutable}',
    'Attribute: "${attr.name}". Attribute values must be an array. Got type ${typeof (attr.values)}': 'Attribute: "${attr.name}". Attribute values must be an array. Got type ${typeof (attr.values)}',
    'Attribute: "${attr.name}". Attribute values array mustn\'t be empty': 'Attribute: "${attr.name}". Attribute values array mustn\'t be empty',
    'Attribute: "${attr.name}". Each value must be a string. Got value ${value}': 'Attribute: "${attr.name}". Each value must be a string. Got value ${value}',
    'Type of label name must be a string. Got value ${label.name}': 'Type of label name must be a string. Got value ${label.name}',
    'Label "${label.name}". Type of label id must be only a number or undefined. Got value ${label.id}': 'Label "${label.name}". Type of label id must be only a number or undefined. Got value ${label.id}',
    'Label "${label.name}". Label color must be a string. Got ${typeof (label.color)}': 'Label "${label.name}". Label color must be a string. Got ${typeof (label.color)}',
    'Label "${label.name}". Type of label color must be only a valid color string. Got value ${label.color}': 'Label "${label.name}". Type of label color must be only a valid color string. Got value ${label.color}',
    'Label "${label.name}". attributes must be an array. Got type ${typeof (label.attributes)}': 'Label "${label.name}". attributes must be an array. Got type ${typeof (label.attributes)}',
    //constructor-viewer.tsx
    'Add label': 'Add label',
    // constructor-viewer-item.tsx
    'Update attributes': 'Update attributes',
    'Delete label': 'Delete label',
    //label-form.tsx
    'Please specify a name': 'Please specify a name',
    'An HTML element representing the attribute': 'An HTML element representing the attribute',
    'You can only append new values': 'You can only append new values',
    'Invalid attribute value: "${value}"': 'Invalid attribute value: "${value}"',
    'Press enter to add a new value': 'Press enter to add a new value',
    'Please specify values': 'Please specify values',
    'Attribute values': 'Attribute values',
    'Specify a default value': 'Specify a default value',
    'Three numbers are expected': 'Three numbers are expected',
    '"${number}" is not a number': '"${number}" is not a number',
    'Minimum must be less than maximum': 'Minimum must be less than maximum',
    'Step must be less than minmax difference': 'Step must be less than minmax difference',
    'Step must be a positive number': 'Step must be a positive number',
    'Please set a range': 'Please set a range',
    'min;max;step': 'min;max;step',
    'Default value': 'Default value',
    'Can this attribute be changed frame to frame?': 'Can this attribute be changed frame to frame?',
    'Mutable': 'Mutable',
    'Delete the attribute': 'Delete the attribute',
    'Label name must be unique for the task': 'Label name must be unique for the task',
    'Label name': 'Label name',
    'Add an attribute': 'Add an attribute',
    'Save the label and return': 'Save the label and return',
    'Done': 'Done',
    'Save the label and create one more': 'Save the label and create one more',
    'Continue': 'Continue',
    'Do not save the label and return': 'Do not save the label and return',
    'Cancel': 'Cancel',
    'Change color of the label': 'Change color of the label',
    'Attributes': 'Attributes',
    //labels-editor.tsx
    'Could not delete the label': 'Could not delete the label',
    'It has been already saved on the server': 'It has been already saved on the server',
    'Copied to clipboard!': 'Copied to clipboard!',
    'Copy': 'Copy',
    'Raw': 'Raw',
    'Constructor': 'Constructor',
    //raw-viewer.tsx
    'Field is expected to be a JSON array': 'Field is expected to be a JSON array',
    'Label names must be unique for the task': 'Label names must be unique for the task',
    'Save labels and return': 'Save labels and return',
    'Reset': 'Reset',
  }